{
  
    
        "post0": {
            "title": "Homework for Unit 1-2",
            "content": "Homework Code . I was getting some error with the file that had my notes for this unit, so I just have the code for the hacks here. . quesCount = 0 score = 0 # Use a dictionary for the questions quesList = [&quot;2+2&quot;, &quot;2*2&quot;, &quot;2*4&quot;, &quot;2/2&quot;] # Use a dictionary for the correct solutions soluList = [&quot;4&quot;, &quot;4&quot;, &quot;8&quot;, &quot;1&quot;] quesAmount= len(quesList) if quesCount &lt;= quesAmount: print(quesList[quesCount] + &quot; n&quot;) guess = input() if (guess == soluList[quesCount]): score+=1 print(&quot;Correct! Score: &quot;) else: print(&quot;Incorrect! The correct answer was &quot; + soluList[quesCount] + &quot; n&quot;) quesCount += 1 print(&quot;Final score: &quot; + str(score)) .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%2014/2022/12/05/Unit-1-2-Homework.html",
            "relUrl": "/jupyter/week%2014/2022/12/05/Unit-1-2-Homework.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "8-10 Notes",
            "content": "List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) #const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; #fruits ← [apple, grape, strawberry] . [&#39;apple&#39;, &#39;grape&#39;, &#39;strawberry&#39;] . # change the value &quot;soccer&quot; to &quot;hockey&quot; #print (sports) sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . # add &quot;golf&quot; as the 3rd element in the list #print (sports) sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;golf&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Determine output of doe segment . display words outputs [&quot;unusual&quot;, &quot;bold&quot;, &quot;away&quot;] because those words dont have a length of 3 letters . Iteration . The repetition of a process. Things like for loops and while loops. Iteration means you dont have to something like what is shown below, but instead could just iterate through a list. . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Using the range() function . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() . x = range(5) for n in x: print(n) . Else, elif, and break . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() Break: stop the loop . HW Iteration . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: . list -&gt; . lima india sierra tango . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() for i in words: print(i[0]) . a b c d e f g h i j k l m n o p q r s t u v w x y z . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D Array . We already know that we can&#39;t just print the matrix by calling it. We need to iterate through it to print it. . matrix = [&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;] def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . matrix = [&quot;dog&quot;, &quot;cat&quot;] def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(matrix) . d o g c a t . More Functions . Try to find another way to print the matrix. Only complete one of the two (unless you&#39;d like to do both). Below is a hint . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) # Python built in function: &quot;*&quot;. Figure out what it does . HW . matrix = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . TypeError Traceback (most recent call last) c: Users Luke Angelini vscode Luke1 _notebooks 2022-12-05-8-10-Notes.ipynb Cell 31 in &lt;cell line: 12&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(matrix[i][j], end=&#34; &#34;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&#34; &#34; changes the end value to space, not a new line. &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; print_matrix1(1) c: Users Luke Angelini vscode Luke1 _notebooks 2022-12-05-8-10-Notes.ipynb Cell 31 in print_matrix1(matrix) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; def print_matrix1(matrix): -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-12-05-8-10-Notes.ipynb#X53sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(matrix[i][j], end=&#34; &#34;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&#34; &#34; changes the end value to space, not a new line. TypeError: object of type &#39;int&#39; has no len() .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%2014/2022/12/05/8-10-Notes.html",
            "relUrl": "/jupyter/week%2014/2022/12/05/8-10-Notes.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "5 7 Notes",
            "content": "grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 grade1 + grade2 + grade3 + grade4 + grade5 . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE OR : returns TRUE if at least one operand is TRUE NOT : returns TRUE if the following boolean is FALSE Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, &quot;NOT 24 &gt; 8&quot;) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;,) . num1 = 100 num2 = 100 sum = num1 + num2 if sum == 200: print(sum) print(&quot;is not equal to 200&quot;) else: print(sum) . 200 is not equal to 200 . hours = 10 if (hours &lt; 8) { console.log(&quot;You are inexperienced. Your salary is 50k&quot;) } else { if (hours &gt;= 10) { console.log (&quot;You are experienced. Your salary is 150k&quot;) } else { console.log (&quot;You are experienced. Your salary is 90k&quot;) } } . You are experienced. Your salary is 150k . Homework . cost = 10 expired = 1 if (expired &gt;= 0) { console.log(&quot;This product is expired&quot;) } else { if (cost &gt;= 50) { console.log (&quot;This product is too expensive.&quot;) } else { if (cost &gt;= 25) { console.log (&quot;This is a regular product&quot;) } else { console.log (&quot;This is a cheap product&quot;) } } } . This product is expired .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%2014/2022/12/01/5-7-Notes.html",
            "relUrl": "/jupyter/week%2014/2022/12/01/5-7-Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Algorithms",
            "content": "Operations . Subtraction: Represented by “-&quot; . Addition: Represented by &quot;+&quot; . Multiplication: Represented by “*” . Division: Represented by “/” . Getting the Remainder: Represented by “MOD” (% in python) . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . Division and multiplication should be done before addition and subtraction. . Modulus works similar to multiplication and division. . Example: Evaluate num1 . 5 % 2 . 1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 # Num2 = 5+15 = 20 # Num3 = 20/50 + (20*2)= 40.4 # Num4 = 40.4 + 50/5 -10 = 40.4 # Result = 40.4 - 20 = 20.4 print(Result) . 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 # Num2 = 1 * 4 = 4 # Num1 = 4 # Num3 = 4 * 3 = 12 # Result = 12 % 2 = 0 print(Result) . 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort .",
            "url": "https://luke-angelini.github.io/Luke1/2022/11/29/Algorithms.html",
            "relUrl": "/2022/11/29/Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Tri 1 Final Blog",
            "content": "Prelude . Overall this tri has been a very educational first look into coding more broadly for me. I started out my interest in the subject with a very basic youtube Python tutorial and have come out of this trimester using not only Python but also HTML and javascript and making programs using APIs and AWS. It has been a very quick experience but I have also learned a lot in this short bit of time. . As for the final itself it mostly went over some program fundamentals we learned while working with the code as well as some principles of coding in a team and what an application should do. . The Quiz Itself . . As for my performance on the quiz I feel I did pretty good. I had a bit of an issue with some of the more complicated questions about the code but given my score I think I had pretty good comprehension of most of the basic coding principles and the other topics included in the final as well. . Review of What I Missed . Q1 Initializing result to 2 and multiplying it by 5 a total of three times yields 2(53), not 2(5×3). I was wrong because I failed to see that each instance of 5 was multiplying itself by the next and not that there were just 3 of them. . Q28 Incorrect. This code incorrectly charges customers who use more than 25 units of electricity. These customers are charged $7 for each of the first 25 units and $5 for each subsequent unit. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. This code segment would incorrectly charge the customer 25 * $7 + 7 * $5 = $210 for the 32 units. Here I made a bit of a dumb mistake and confued the 7 and the 5 in the else line. . Q34 Incorrect. The code segment initially assigns an empty list to thirdList, but none of the lists are empty after the code segment is executed. Here I was mostly confused about how the variable replacement works. . Q41 Incorrect. This is the initial value of p. None of the variables has the value 10 after executing the code segment.Another one where I was confused about variable replacement. . Q48 Incorrect. The value of y is initially 50, but its value is changed to 75 in the fifth statement. And a final question where I was once again confused about how variable replacement works. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%2012/2022/11/10/tri1-final.html",
            "relUrl": "/markdown/week%2012/2022/11/10/tri1-final.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Night at the Museum Blog",
            "content": "Overview . Night at the Museum was certainly very interesting this trimester and our group got to go around and see a lot of the creativity this school has to offer. As for ourselves, our presentation went well and we were able to show off our Practice Nexus project. But, of course there was copious amounts of talent outside of the APCSP class. . 3D Animation . At the 3D animation display we saw a very tasty design style. . . . Pottery . Possibly some of the most skillful work I saw at night at the museum, and also some of the most practical. Truly it is a very useful artform, however, I must say the piece a fellow classmate Varalu dubbed the “Bananolphin” was my personal favorite. . . . Ah, baseball. An American passtime. Maybe we’ll gettem next year, dang those Phillies. . . Painting . If the pottery was the most skillful the painting was certainly the most beautiful with this stunning landscape here being just one of the great pieces I found . . Cat or dog person? This artist clearly has a preference . .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%2012/2022/11/04/Museum.html",
            "relUrl": "/markdown/week%2012/2022/11/04/Museum.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Jokes API",
            "content": "Similarities . There are some similarities that I see with the Javascript in the Jokes API: . They all have similar syntax with each other | All connect to the table made using HTML code | Use a lot of .json and .log | Use fetch a lot as well as if and else statements | Make use of functions to check and run things | Use onclick to run a function each time an action occurs | All do different things using the same API | . Breaking up the code for Covid API . The code below makes a table using HTML code and makes 4 columns titled Time, All-time Cases, Recorded Deaths, and Active Cases. It also makes an id for each row under those 4 columns with the id name the same as its column name. . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; . The code below also uses HTML code to output a table with the same columns and titles as the code above. But, this one has a different id with the id name equal to &quot;result&quot;. . &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; . The code below uses the link to the API to extract specific variables and then output them in the &quot;result&quot; section in the HTML table. It also makes headers. . &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; . The code below fetches the url and headers made in the segment of code presented above. The code checks for any response errors in those headers uding an if statement and if there is none, those elements are appended to the HTML table. The responses are also outputted using JSON data. . // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) . The code below gets all the data specific to the API such as World Data, Country Data, and then are appended to the HTML table. This is achieved through the getElementById. They are appended to their respective row based on whater their data is about. The code also checks for fetch errors and then appends to the table again. . // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://luke-angelini.github.io/Luke1/python/week%209/2022/10/24/JokesAPI.html",
            "relUrl": "/python/week%209/2022/10/24/JokesAPI.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "CTE",
            "content": "Sample Occupations . Computer Programmer | Software Developer/Applications | Information Security Analyst | Web Developer | E-Business/E-Commerce Specialist | . Key Ideas/Standards . Identify and apply the systems development process. Define and analyze systems and software requirements. Create effective interfaces between humans and technology. Develop software using programming languages. Test, debug, and improve software development work. Integrate a variety of media into development projects. Develop Web and online projects. Develop databases. Develop software for a variety of devices, including robotics. Develop intelligent computing. . Hacks . What standards have we hit so far? Which assignment do they relate to? What standards are you looking forward to learning more about? What other careers can you benefit from being in this pathway? . The standards we have hit are: . Devloping databases - when we did the Python Lists and Dictionaries assignment | Develop Web and online projects - when we made our flask repository and fastpages | Develop software using programming languages - when we made tables using HTML &amp; Javascript, as well as the Python Quiz | Test, debug, and improve software development work - when we did error testing and also learned to debug cells | Integrate a variety of media into development projects - when we added links, images, and videos to our flask and fastpages | Create effective interfaces between humans and technology - when we made an app using Applab that was based on user input and had many interactions | . Some standares I am looking forward to are: . Develop software for a variety of devices, including robotics | Develop intelligent computing | . Some careers we can benefit from being in this class are Computer Programmer, Software Developer/Applications, and Web Developer .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%2011/2022/10/24/CTE.html",
            "relUrl": "/markdown/week%2011/2022/10/24/CTE.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "import requests url = &quot;https://twinword-word-association-quiz.p.rapidapi.com/type1/&quot; querystring = {&quot;level&quot;:&quot;3&quot;,&quot;area&quot;:&quot;sat&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;9c2f17a5e1msh5ab83b6111c6c75p1ca21ejsna6673193cec0&quot;, &quot;X-RapidAPI-Host&quot;: &quot;twinword-word-association-quiz.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) .",
            "url": "https://luke-angelini.github.io/Luke1/2022/10/19/API-test.html",
            "relUrl": "/2022/10/19/API-test.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Git Sociology",
            "content": "Hacks . The main repository for our project will be the flask repository which we created. We all have access to this project and can push edits to the page. We plan to further customize the page to match the needs of our project. | We have a .gitignore with files which want to avoid from being committed. | We have used issues for our own review tickets. We will begin using issues for updating what has been done each week. | We will make pull requests to help us track the development of the page. We have communicated on changes to the page before, but pull requests will help us make sure we are on the same page and work on the project at the same time. | Forks and branching can help us be more organized when making changes. We have yet to use forks, but as we develop more of our project, we will use it. We have been recently begun managing our issues using a team Scrum Board. This will help us make sure we have all things completed. | .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%207/2022/10/13/git-sociology.html",
            "relUrl": "/markdown/week%207/2022/10/13/git-sociology.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "First API",
            "content": "import requests url = &quot;https://random-math-problem.p.rapidapi.com/random-problem&quot; querystring = {&quot;type&quot;:&quot;html&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;8677538c65mshfd1d85d7adf047fp17a8a1jsn7a54a04df28c&quot;, &quot;X-RapidAPI-Host&quot;: &quot;random-math-problem.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) title = response.json().get(&#39;title&#39;) problem = response.json().get(&#39;problem&#39;) print(&quot;Printing response.text&quot;) print(response.text) . ModuleNotFoundError Traceback (most recent call last) c: Users Luke Angelini vscode Luke1 _notebooks 2022-10-13-First-API.ipynb Cell 2 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-10-13-First-API.ipynb#W1sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import requests &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-10-13-First-API.ipynb#W1sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; url = &#34;https://random-math-problem.p.rapidapi.com/random-problem&#34; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Luke%20Angelini/vscode/Luke1/_notebooks/2022-10-13-First-API.ipynb#W1sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; querystring = {&#34;type&#34;:&#34;html&#34;} ModuleNotFoundError: No module named &#39;requests&#39; . print(&quot;Printing response.json()&quot;) print(response.json()) . Printing response.json() {&#39;title&#39;: &#39;&lt;h2&gt;Inverse Digit Sum II&lt;/h2&gt;&#39;, &#39;problem&#39;: &#39;&lt;div class=&#34;problem_content&#34; role=&#34;problem&#34;&gt; r n&lt;p&gt;Writing down the numbers which have a digit sum of 10 in ascending order, we get: n$19, 28, 37, 46,55,64,73,82,91,109, 118, dots$&lt;/p&gt; n&lt;p&gt; nLet $f(n,m)$ be the $m^{ text{th}}$ occurrence of the digit sum $n$. For example, $f(10,1)=19$, $f(10,10)=109$ and $f(10,100)=1423$.&lt;/p&gt; n&lt;p&gt; nLet $ displaystyle S(k)= sum_{n=1}^k f(n^3,n^4)$. For example $S(3)=7128$ and $S(10) equiv 32287064 mod 1 ,000 ,000 ,007$.&lt;/p&gt; n&lt;p&gt; nFind $S(10 ,000)$ modulo $1 ,000 ,000 ,007$.&lt;/p&gt; n&lt;/div&gt;&#39;} . Organized Question . Each question has a title and a problem. The title is the name of the project, and the problem stores the actual question. Printing each thing will allow the user to see the specific HTML in the . print(&quot;Printing a title&quot;) print(title) . Printing a title &lt;h2&gt;Inverse Digit Sum II&lt;/h2&gt; . print(&quot;Printing a problem&quot;) print(problem) . Printing a problem &lt;div class=&#34;problem_content&#34; role=&#34;problem&#34;&gt; &lt;p&gt;Writing down the numbers which have a digit sum of 10 in ascending order, we get: $19, 28, 37, 46,55,64,73,82,91,109, 118, dots$&lt;/p&gt; &lt;p&gt; Let $f(n,m)$ be the $m^{ text{th}}$ occurrence of the digit sum $n$. For example, $f(10,1)=19$, $f(10,10)=109$ and $f(10,100)=1423$.&lt;/p&gt; &lt;p&gt; Let $ displaystyle S(k)= sum_{n=1}^k f(n^3,n^4)$. For example $S(3)=7128$ and $S(10) equiv 32287064 mod 1 ,000 ,000 ,007$.&lt;/p&gt; &lt;p&gt; Find $S(10 ,000)$ modulo $1 ,000 ,000 ,007$.&lt;/p&gt; &lt;/div&gt; .",
            "url": "https://luke-angelini.github.io/Luke1/python/week7/2022/10/13/First-API.html",
            "relUrl": "/python/week7/2022/10/13/First-API.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Program Design and Development",
            "content": "Program Basics . Our program will be a notes site which allows users to store their notes for classes. We plan to store the notes so a user can make specific folders for certain classes. Also, we want the user to access the notes, even after closing the site. . Plan . Develop each aspect of code -&gt; Run the code -&gt; Optimize code -&gt; Add to big project . How we could approach development: . Develop a way for users to input questions and answers | Develop a way for users to store the flashcards as a named set | Create a way for users to access cards. | Develop a way for users to place flashcard sets in a folder | Create a way for users to access cards. | Develop a login system. | Create example sets. | . Program Info . Program Purpose and Function . The purpose of the program is to randomly generate questions based on a user’s notes of key terms/dates/ideas and definitions. The program will take the user’s notes and, based on it, select the key terms and output multiple quiz questions which will be displayed randomly. It will score the quiz and tell you what you got wrong and what you need to study on. . Data Abstraction . The program will contain lists and dictionaries. Every key term will have a definition and these will be stored in a dictionary which will be stored in a list. Or they will be stored in a local database and we will use the objects in the database to create the quiz. . Managing Complexity . The dictionaries and databases will manage the complexity of the program by organizing the data inputted by the user. It will also help calling back to create the quiz. . Procedural Abstraction . A function will be created to call back to the data inputted by the user. The function will iterate over the dictionary/database and use the values in them as a parameter to make a quiz. . Algorithm Implementation . Like stated before, the program will contain a function that uses iteration and sequencing to make a quiz based off the data inputted by the user that is saved in a database or dictionary. . Testing . The function will be called each time the user inputs a note and each time the user generates a quiz. When the user inputs a note, the function is called and saves the note inside a dictionary or database. When the user presses the button that generates the quiz, the function is again called and iterates through the user’s notes to generate a quiz that is related to the key terms the user inputted. . How it aligns with Standards . Instructions for input from one of the following: the user, a device, an online data system, a file Our project will take in user input and be able to save data for specific users. Use of at least one list (or other collection type) to represent a collection of data that is stored and used to manage program complexity and help fulfill the program’s purpose We will store question and answer sets in either lists or dictionaries. At least one procedure that contributes to the program’s intended purpose, where you have defined: the procedure’s name, the return type, one or more parameters We will be able to return question and answer sets and store them under a name. An algorithm that includes sequencing, selection, and iteration that is in the body of the selected procedure We will have to create a random selection algorithm for our Calls to your student-developed procedure The program will feature unique student created procedure to call back to. Instructions for output (tactile, audible, visual, or textual) based on input and program functionality The outputs could have correct and incorrect screen for the user. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%207/2022/10/12/project-plan.html",
            "relUrl": "/markdown/week%207/2022/10/12/project-plan.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "AP Classroom Tests",
            "content": "Completed Quizzes . . Challenges: Week 6 . I wasn’t exactly sure what some of the syntax meant. This problem was especially apparent in the word problems and the last quiz in general where I wasn’t exactly sure what the desired effects were for the questions about the mobile application and also what some of the problems with example syntax were doing. . Challenges: Week 7 . For the last question on the correcting errors quiz I didn’t realize that there was nothing to account for numbers lower than 7 in the problem and I got confused thinking that because there wasnt a &gt;= with the 7 that it would be some kind of error. As for the internet quiz I was mostly confused about some of the vocabulary and the subject matter. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%206/2022/10/03/test-proof.html",
            "relUrl": "/markdown/week%206/2022/10/03/test-proof.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 one = 1 for i in alphabetList: if i != letter: count += 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + one) + &quot; letter in the alphabet&quot;) . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] != 0: if numbers[i] % 5 == 0 or numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu:&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times count = int(input(&quot;How many items do you want?&quot;)) i = 0 print(&quot;Your order:&quot;) while i &lt; count: item = input(&quot;Please select an item from the menu&quot;) total = total + menu[item] print(item) i += 1 #code should add the price of the menu items selected by the user print(&quot;Total is $&quot; + str(total)) . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://luke-angelini.github.io/Luke1/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Scrum Team Roles",
            "content": "Scrum Team Diagram . . Our Scrum Team . Arnav, Tay, Adi and I are highly focused on planning and sharing ideas within our team to ensure that our knowledge is not limited to any one member. We place a large emphasis on the brainstorming aspect of sprint planning. Tay oversees productivity and helps make sure that we are all collaborating in our work. He works with me to do backend development while Adi and Arnav work on the frontend. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%205/2022/09/25/scrum-team.html",
            "relUrl": "/markdown/week%205/2022/09/25/scrum-team.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Collegeboard Program Purpose and Project Ideas",
            "content": "Essential Knowledge . The purpose of computing innovations is to solve problems or to pursue interests through creative expression. | An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovation | Program inputs are data sent to a computer for processing by a program. Input can come in a variety of forms, such as tactile, audio, visual, or text. | An event is associated with an action and supplies input data to a program | Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action occurs that affects the flow of execution. | Inputs usually affect the output produced by a program. | A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software. | A code segment is a collection of program statements that is part of a program. | A program needs to work for a variety of inputs and situations | . . Categories of Innovation . Applications: Games | Social Media | Business | Productivity | . | Physical Devices: Computers | Smart phones/tablets | Smart “Things” | Wearables | . | Systems: E-Commerce | Cloud Services | E-mail | . | . . Innovations created for a Purpose . Guiding Questions: . Why does the computing innovation exist? | What problem(s) does the computing innovation solve? | What does the computing innovation allow us to do that we could not do before? | . . What is a program? . A program is a collection of statements. . A statement is a single command | A group of statements is called a code segment | Code segments are executed according to the rules of the programming language | A program is often referred to as software | . . Final Project . Idea . My group had a couple of ideas, but here is our best/main one: . A random quiz generator. Save notes in the website and the alogrithm uses the notes to genrate questions for a quiz. The quiz is then scored and the topics missed are highlighted* | . This is good for our educational purpose because this project has complexity and a solid purpose that strives to help people. . This project is also going to hold team members’ interest for 8 weeks because this project can always be improved - whether it be the ideas behind it or the code running the program - and the code will also take time to be finished. This project is pretty complex - not so much that we are uninterested or demotivated - but enough so that we can’t finish it in just a few days. . This project can be used by people beyond the 8 weeks. This program is built so that people can use it. Whenever people input in notes, those notes will be saved and quiz questions will also be generated based on those notes (i.e, Customer Needed). . This project has potential to be used for Create Performance Task submission because it fits the criteria for the collegeboard submission. The project is complex, uses data abstraction, contains lists and dictionaries, stores data, and is able to be tested. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%205/2022/09/25/project-ideas.html",
            "relUrl": "/markdown/week%205/2022/09/25/project-ideas.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "HTML and Javascript",
            "content": "Verb Ending Verbs . AR | Nadar | . Andar | Mejorar | . ER | Comer | . Correr | Querrer | IR | Dormir | . Morir | Cubrir | . &lt;/table&gt; .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%205/2022/09/25/java-table.html",
            "relUrl": "/markdown/week%205/2022/09/25/java-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Javascript",
            "content": "var msg = &quot;Welcome! Today we&#39;ll be practicing javascript basics.&quot;; console.log(msg); . Welcome! Today we&#39;ll be practicing javascript basics. . Javascript Arithmetic . Here is a basic function that adds two numbers . function adding(x, y) { return x + y; } adding(10,90) . 100 . Function With Parameter . Here is a basic function with a parameter in it. . function numbercheck(x){ if (x &gt; 100 ) { console.log(x + &quot; is greater than 100&quot;); } else { console.log(x + &quot; is less than or equal to 100&quot;); } } numbercheck(99) . 99 is less than or equal to 100 .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%205/2022/09/25/Javascript.html",
            "relUrl": "/jupyter/week%205/2022/09/25/Javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Collaboration Notes",
            "content": "Notes . Large companies need to work together to create things Ex. Facebook has to manage multiple departments for multiple apps Computing innovation: Includes a program has an integral part of its function Computing innovation can be physical(Oculus), nonphysical software(Facebook), or a nonphysical concept(advertising on social media) People can work together to develop computing innovations It helps to have diverse backgrounds in each teammate, and this will help in creating quality programs. Important to: Communicate, Get a Consensus, Negotiate, Resolve Conflicts Pair programming: Two programmers working together in a pair. One person writes the code, while the other reviews the code Think-Pair-Share: Students think on their own, then pair up to share ideas, and then share with the class Leaving comments on code help partners see what you are doing, and help you stay oriented. Also use comments to cite sources in your code. . My Scrum Team . Tay, Arnav, and Aditya are my current scrum team parters. We don’t really have any prior connections or common interests. We are diverse in our backgrounds and perpectives. We come from various grade levels, which is part of our different backgrounds. Our group will succeed in the classroom, as we are hard workers, we collaborate frequently, and we are willing to put in the effort to learn. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%204/2022/09/19/collaboration.html",
            "relUrl": "/markdown/week%204/2022/09/19/collaboration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Mental Health Video Post",
            "content": "Notes from the video . Stress: a state of mental or emotional strain or tension resulting from adverse or very demanding circumstances | Stress is prominent in many places | Getting a good thing happen on one day usually does not change our happiness multiple months down the road, so we should try to implement small changes in our life everyday. | Just because we know something, it does not mean it will benefit us unless we put it into practice. | Need to do different things, like how people do different exercises in the gym. | While we need a decent amount of material possessions(money, food, clothing, etc.), at a certain point, having bigger and better does not improve happiness levels. | Make social connection | Social connection: the feeling that you belong to a group and generally feel close to other people | Important to make time to spend with friends and family away from homework. | Help others | Helping others can help us by making us feel good about ourselves | Treat yourself | No matter how you treat yourself for accomplishments, you can gain important benefits. | Make time for gratitude | Show gratitude for your situation and the other people around you who help you. | . Gratitude . Gratitude helps to keep us grounded. It helps us to ensure we remember all of the positive sides of life that sometimes become clouded through our ambition or stress. . As for things I am grateful for, I would say there are a few. The biggest are my family and my close friends, in both cases I have been blessed to have been given loving and appreciative individuals who want to help me succeed. I am also very grateful for the place in middle class society that I have been born into with all its benefits such as easy access to food, shelter, and devices like the computer I am typing with right now. And finally I would say I am grateful for the staff of this school for doing such a great job in helping me to learn. . My experience with a note of gratitude: I gave my note of gratitude to my dad. He was a bit surprised upon hearing it, and he seemed very pleased with what I had told him. . Goals Goals can help an individual feel a sense of progress. I think goals are great ways to divide up tasks, which can lead to less stress. When creating goals, I like to have more specific goals. . My Personal Goals: . Work on homework before the night before it’s due | Sleep for at least 8 hours each night | Try and put in an extra hour each day on some school or personal project | . Goals can help us feel more organized, even we have a lot on our plate. This will help reduce stress levels in us. Especially with college application season, I think creating a list of small and specific goals related to applications will allow me to be less stressed, feel more in control, and be happier. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%204/2022/09/15/videopost.html",
            "relUrl": "/markdown/week%204/2022/09/15/videopost.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Create Task Planning",
            "content": "Initial Idea . A calendar that tracks user goals and displays percentages towards completing those goals and helps the user organize tasks and task categories by levels of importance. The program could also automaticallly shift around tasks on the calendar if the user does not mark them as done by a certain day. . College Board Requirement Review . Program Purpose and Function . The Program will take input for different categories that the user will choose. Then the user will input tasks on certain dates on the calendar, each of which will automatically be considered one part of the whole and the calendar will display multiple bars tracking the users progress towards that whole. The importance of these tasks could be increased or decreased by the user making them larger or smaller parts of the whole. The calendar will display tasks that have not been worked on at the end of each week and move them up in priority based on how much of it has been completed. . Data Abstraction . The program will contain lists and dictionaries for each task. Every task will have a number assigned to it that can be set by the user and that number will be called on by the calendar and checked if the task is completed to calculate how much of each task category is completed. . Managing Complexity . The lists and dictionaries will manage complexity by containing all of the values of the user input. . Procedural Abstraction . A function will be created to check if each task is completed or not completed for each category and looped to add up the numbers for each completed task and see how much out of the whole of the task category is completed. Another function will be used to check if there are any uncompleted tasks that are in a task category that is under a certain percent completed (that can be set by the user) and will raise that task category in importance if that is true. . Algorithm Implementation . The function called will iterate through each task in the calendar saved in a database or dictionary. . Testing . When the user marks a task as completed the function will be called to update percentages completed and move up tasks on the calendar. .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%203/2022/09/12/create-task-plan.html",
            "relUrl": "/markdown/week%203/2022/09/12/create-task-plan.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Applab Quiz Planning",
            "content": "Plan . We will create an introduction page, and have a 3 quesiton quiz. The intro page will have a button which allows the user to go to the next question, as well as an image related to the quiz. . Each question will have 4 answer choices, with an image or button corresponding to answer choices. If the user clicks on the button corresponding to the right answer, they will be taken to a “correct screen.” If the user gets the question wrong(clicks on an incorrect answer choice), they will be taken to an “incorrect page.” . Example Question: . . On each “correct screen”, we plan to have an image which showcases an image of validation, and a button for the next question. On each “incorrect page”, we would have the opposite of the “correct screen”, but still a button for the next question. . After the user answers all the questions, we will take them to a final screen, which could show their score and could possibly play other effects congratulating them on completing it or thanking them for playing. . Screens: Home Screen -&gt; Question 1 Screen -&gt; Correct/Wrong Screen -&gt; Question 2 Screen -&gt; Correct/Wrong Screen -&gt; Question 3 Screen -&gt; Correct/Wrong Screen -&gt; Final Screen . Final Code . We ended up mostly using onEvent to let us create a program that would progress from screen to screen as buttons were clicked. . . We also used screens in between questions that told players if they got the question correct or incorrect and then added one to the score variable if the answer was correct. . . Finally we made a results box which displayed the variable of the score since each the time the quiz was played the score would be different. We also added a sound to play at the end once the user clicked to receive their score which plays an audio file upon clicking the showscore button. . . Final Quiz . You can see the Quiz Here . Successes, Discoveries and Challenges . We created a quiz which was able to track the score of the user. We had some challenges defining a variable to store the score, since the syntax is different from python. We realized that we had to define the variable, and then add to it using different syntax. This is different from python because python allows the coder to keep on redefining a variable. . We also had some trouble with formatting, and centering the images and items on the screen. We learned about the pixel dimensions of the screen(it is 320 x 450 px!) We then had to use dimensions of other items on the screen to help us center the images. It was also interesting to see how the positioning system works. . Lessons Learned . Using AppLab was a very cool experience. It really helped us learn more about Javascript, with an easy to use interface. We liked using the blocks, but the ability to check out the code in true Javascript helped us see basic Javascript programming. This project helped us learn about user interaction and how Javascript is a powerful language for that. . We also got a preview of how to use images in Javascript. We saw the positioning system, but there still a lot to learn about how to call the shapes in real code. . Extra Program . We also built an additional program we worked on which was a way for two people to play tic tac toe created by altering images and using variables. The game can be found here .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%203/2022/09/11/quiz-planning.html",
            "relUrl": "/markdown/week%203/2022/09/11/quiz-planning.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "HTML",
            "content": "Week 2 HTML Work . Screenshot of Changing Theme . . Using Tags With the Search Function . Here several posts with the week X tag are shown . .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%202/2022/09/05/html.html",
            "relUrl": "/markdown/week%202/2022/09/05/html.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Dictionaries and Lists",
            "content": "Info Db . Added some stuff to the Info Db dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) #added lukes info InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Angelini&quot;, &quot;DOB&quot;: &quot;July 29&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;ltangelini@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) # Allow input InfoDb.append({ &quot;FirstName&quot;: input(), &quot;LastName&quot;: input(), &quot;DOB&quot;: input(), &quot;Residence&quot;: input(), &quot;Email&quot;: input(), &quot;Owns_Cars&quot;: input() }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Angelini&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;ltangelini@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;]}, {&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Smith&#39;, &#39;DOB&#39;: &#39;July 4 &#39;, &#39;Residence&#39;: &#39;New York&#39;, &#39;Email&#39;: &#39;Johnistheman@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;Ford F150&#39;}] . For Loops With Index . Here is a basic loop using a list of random items and iterating that list through a for loop. Each item is printed as an instance of the variable i in the list below. . dog_list = [&quot;German Shephard&quot;, &quot;Labrador Retriever&quot;, &quot;Great Dane&quot;, &quot;Chihuahau&quot;, &quot;Poodle&quot;, &quot;Pitbull&quot;] # The i variable represents a value in the index dog_list. The for loop prints until the list is complete. for i in dog_list: print(i) . German Shephard Labrador Retriever Great Dane Chihuahau Poodle Pitbull . Reversing Text . Data can be output in reverse order. The [::-1] code can be applied to a string in order to reverse it. . def backward(p): print(p[::-1]) print(p) return p[::-1] == p word = input(&quot;Enter a word: &quot;) # A word is collected with the input function and then put into the backward function below # .casefold() can be put after a variable to convert it to all lowercase if backward(word.casefold()) is True: # The p[::-1] reverses the text of the input word and the rest of the function prints the word and returns the word as equal to p print(&quot;{0} is the same forwards and backwards&quot;.format(word)) else: print(&quot;{0} is not spelled the same forwards and backwards&quot;.format(word)) . god dog dog is not spelled the same forwards and backwards . Simple While Loop . By using a while loop you can iterate through a loop until a certain condition is met. Below is an example created by counting up from 1 to 10. . i = 1 while i &lt;=10: print(i) i += 1 # The i variable represents the number and each time the number is printed the value i is increased. print (&quot;Done with loop.&quot;) . 1 2 3 4 5 6 7 8 9 10 Done with loop. . Adding to Dictionary . You can also add new keys to a dictionary. In this example I created a dictionary with colors that each have objects assigned to them. . New_Dict = { &quot;Red&quot;: &quot;Fire&quot;, &quot;Blue&quot;: &quot;Water&quot;, &quot;Green&quot;: &quot;Grass&quot; } print(New_Dict) # A New key can be added to the dictionary New_Dict[&quot;Yellow&quot;] = &quot;Lightning&quot; print(New_Dict) . {&#39;Red&#39;: &#39;Fire&#39;, &#39;Blue&#39;: &#39;Water&#39;, &#39;Green&#39;: &#39;Grass&#39;} {&#39;Red&#39;: &#39;Fire&#39;, &#39;Blue&#39;: &#39;Water&#39;, &#39;Green&#39;: &#39;Grass&#39;, &#39;Yellow&#39;: &#39;Lightning&#39;} . New Python Quiz . This quiz is created by using a variable, word, which the user inputs into the quiz parameter, prompt, which is then checked for each key in the dictionary to see if it is correct or not. . def Python_Quiz(prompt): global word print (&quot;Question: &quot; + prompt) word = input() return word score = 0 My_Quiz = [{ &quot;What function is used to output text?&quot;:&quot;print&quot;, &quot;What keyword is used to define a function?&quot;:&quot;def&quot;, &quot;What command allows the use of previously developed functions?&quot;:&quot;import&quot;, &quot;What function is used to collect user input?&quot;:&quot;input&quot; }] # for dict in My_Quiz: for questions, answers in dict.items(): Python_Quiz(questions) if word == answers: print(&quot;Correct answer&quot;) score += 1 else: print(&quot;Incorrect answer&quot;) print(&quot;You got&quot; + str(score) + &quot;/4 correct.&quot;) . Question: What function is used to output text? Answer is incorrect Question: What keyword is used to define a function? Answer is incorrect Question: What command allows the use of previously developed functions? Answer is incorrect Question: What function is used to collect user input? Answer is incorrect You got0/4 correct. .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%202/2022/08/31/python-loop.html",
            "relUrl": "/jupyter/week%202/2022/08/31/python-loop.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Docx Post",
            "content": "Docx Files: . Docx Files can be created in Google Docs by downloading it as a Microsoft word document or by using Microsoft Word directly . | Then the file should be saved using the `YYYY-MM-DD-*.dock` into the `/_word` folder. . | Finally changes should be Synced with Github . | .",
            "url": "https://luke-angelini.github.io/Luke1/2022/08/29/docx-post.html",
            "relUrl": "/2022/08/29/docx-post.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) #added lukes info InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Angelini&quot;, &quot;DOB&quot;: &quot;July 29&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;ltangelini@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Angelini&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;ltangelini@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Luke Angelini Residence: 4S Ranch Birth Day: July 29 Cars: None . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Luke Angelini Residence: 4S Ranch Birth Day: July 29 Cars: None . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Luke Angelini Residence: 4S Ranch Birth Day: July 29 Cars: None . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | . dog_list = [&quot;German Shephard&quot;, &quot;Labrador Retriever&quot;, &quot;Great Dane&quot;, &quot;Chihuahau&quot;, &quot;Poodle&quot;, &quot;Pitbull&quot;] #The i variable represents a value in the index dog_list. The for loop prints until the list is complete. for i in dog_list: print(i) print(&quot;That&#39;s all the dogs I can remember.&quot;) . German Shephard Labrador Retriever Great Dane Chihuahau Poodle Pitbull That&#39;s all the dogs I can remember. . def backward(p): print(p[::-1]) print(p) return p[::-1] == p word = input(&quot;Enter a word: &quot;) #A word is collected with the input function and then put into the backward function below #.casefold() can be put after a variable to convert it to all lowercase if backward(word.casefold()) is True: #the p[::-1] reverses the text of the input word and the rest of the function prints the word and returns the word as equal to p print(&quot;{0} is the same forwards and backwards&quot;.format(word)) else: print(&quot;{0} is not spelled the same forwards and backwards&quot;.format(word)) . f f f is the same forwards and backwards .",
            "url": "https://luke-angelini.github.io/Luke1/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Tool Check",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /home/luke_angelini/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/luke_angelini/.local/share/jupyter/kernels/bash javascript /home/luke_angelini/.local/share/jupyter/kernels/javascript python3 /home/luke_angelini/.local/share/jupyter/kernels/python3 . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%2013/2022/08/28/toolcheck.html",
            "relUrl": "/jupyter/week%2013/2022/08/28/toolcheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Statistics Notes",
            "content": ". Terms . Median = the value separating the higher half from the lower half of a data sample | Mean = the average of the data set | Mode = the most common number of the data set | . Study Tools . Stats Calculator: Stapplet | Additional Studying: Khan Academy | .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%201/2022/08/28/statistics-notes.html",
            "relUrl": "/markdown/week%201/2022/08/28/statistics-notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Bash Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /home/luke_angelini/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/luke_angelini/.local/share/jupyter/kernels/bash javascript /home/luke_angelini/.local/share/jupyter/kernels/javascript python3 /home/luke_angelini/.local/share/jupyter/kernels/python3 . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%201/2022/08/28/bash-test.html",
            "relUrl": "/jupyter/week%201/2022/08/28/bash-test.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "First Python Quiz",
            "content": "print (&quot;Write the letter for the correct answer below.&quot;) class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;What function is used to output text? n(a)print n(b)write n(c)say&quot;, &quot;What keyword is used to define a function? n(a)define n(b)function n(c)def&quot;, &quot;What command allows the use of previously developed functions? n(a)recall n(b)import n(c)function&quot;, &quot;What function is used to collect user input? n(a)input n(b)import n(c)collect&quot;, ] questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;c&quot;), Question(question_prompts[2], &quot;b&quot;), Question(question_prompts[3], &quot;a&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;You got&quot; + str(score) + &quot;/&quot; + str(len(questions)) + &quot;correct.&quot;) run_quiz(questions) . Write the letter for the correct answer below. You got2/4correct. . new_quiz = [] new_quiz.append({ &quot;What function is used to output text?&quot;:&quot;print&quot;, &quot;What keyword is used to define a function?&quot;:&quot;def&quot;, &quot;What command allows the use of previously developed functions?&quot;:&quot;import&quot;, &quot;What function is used to collect user input?&quot;:&quot;input&quot; }) .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%201/2022/08/28/Python-Quiz.html",
            "relUrl": "/jupyter/week%201/2022/08/28/Python-Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Magic: the Gathering Game Tracker",
            "content": "Matches by Deck Color . . Limited Games WU WB WR WG UB UR UG BR BG RG 3 Color Other . Wins | 1 | 29 | 1 | 18 | 0 | 7 | 3 | 15 | 4 | 0 | 1 | 0 | . Losses | 6 | 19 | 3 | 7 | 3 | 4 | 3 | 9 | 3 | 0 | 3 | 0 | . L plus Ratio plus bozo plus .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%201/2022/08/28/Magic.html",
            "relUrl": "/markdown/week%201/2022/08/28/Magic.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Basic Calculator",
            "content": "num1 = float(input(&quot;Enter first number: &quot;)) op = input(&quot;Enter operator: &quot;) num2 = float(input(&quot;Enter second number: &quot;)) if op == &quot;+&quot;: print(num1 + num2) elif op == &quot;-&quot;: print(num1 - num2) elif op == &quot;/&quot;: print(num1 / num2) elif op == &quot;*&quot;: print(num1 * num2) else: print(&quot;Invalid operator.&quot;) . -2.0 .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%201/2022/08/28/Basic-Calculator.html",
            "relUrl": "/jupyter/week%201/2022/08/28/Basic-Calculator.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "",
            "url": "https://luke-angelini.github.io/Luke1/2022/08/25/Notebook1.html",
            "relUrl": "/2022/08/25/Notebook1.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "First Markdown Post",
            "content": "List of Items . First item | Second item | Third item | . Example Boxes . . Be careful . Coding can often come with bugs Example Table . Column 1 Column 2 . Comp Sci | English | . Teaches Coding Skills | Teaches Grammar Skills | .",
            "url": "https://luke-angelini.github.io/Luke1/markdown/week%200/2022/08/22/markdown.html",
            "relUrl": "/markdown/week%200/2022/08/22/markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Hello World",
            "content": "print (&quot;Hello World&quot;) . Hello World .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/week%200/2022/08/21/Hello-World.html",
            "relUrl": "/jupyter/week%200/2022/08/21/Hello-World.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://luke-angelini.github.io/Luke1/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://luke-angelini.github.io/Luke1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post37": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://luke-angelini.github.io/Luke1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Vocab",
          "content": "General Vocab list: . Markdown: A file type for simple text formats | Python: A general-purpose programming language | Powershell: . cd = change directory | cd ~ = change directory to home | ls = list files | code. = opens VScode | Markdown Vocab list: . #, ## Changes size of font | italics | bold | strikethrough | Python Vocab List: . Def: Defines a function | Print: Prints the inputted text | If: Performs an action if a condition is true | Else: Performs an action if a condition is not true | String: A series of characters | Boolean: A value that is either true of false |",
          "url": "https://luke-angelini.github.io/Luke1/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website was created by Luke Angelini, a student of Del Norte High School studying AP Computer Science Principles. .",
          "url": "https://luke-angelini.github.io/Luke1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Submenu",
          "content": "Submenu Links . Java Table | Javascript Basics | API | .",
          "url": "https://luke-angelini.github.io/Luke1/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://luke-angelini.github.io/Luke1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}